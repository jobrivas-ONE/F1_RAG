import streamlit as st
import os
import io
import pandas as pd
from PIL import Image

# --- SOLUCI√ìN TEMPORAL PARA COMPATIBILIDAD DE SQLITE3 EN STREAMLIT CLOUD (SI ES NECESARIO) ---
# Si el error "sqlite3.OperationalError" persiste, intenta descomentar las siguientes dos l√≠neas.
# Sin embargo, con "pysqlite3-binary" y la inicializaci√≥n expl√≠cita, a menudo no son necesarias.
# __import__('pysqlite3')
# import sys
# sys.modules['sqlite3'] = sys.modules.pop('pysqlite3')
# ------------------------------------------------------------------------------------------

from langchain_google_genai import GoogleGenerativeAIEmbeddings, ChatGoogleGenerativeAI
from langchain_community.vectorstores import Chroma
from langchain.chains import RetrievalQA
from langchain.prompts import PromptTemplate

# --- CONFIGURACI√ìN DE P√ÅGINA ---
st.set_page_config(
    page_title="Asistente de Informaci√≥n de Estudiantes - UOH",
    page_icon="üéì",
    layout="wide",
    initial_sidebar_state="expanded"
)

# --- Autenticaci√≥n (con correcci√≥n de st.experimental_rerun a st.rerun) ---
def check_password():
    """Returns `True` if the user's password is correct, `False` otherwise."""

    if "password_correct" not in st.session_state:
        st.session_state["password_correct"] = False
    
    if st.session_state["password_correct"]:
        return True # Ya autenticado

    # Mostrar formulario de login si no est√° autenticado
    st.sidebar.title("Acceso al Asistente")
    with st.sidebar.form("login_form"):
        st.text_input("Usuario", key="username_input")
        st.text_input("Contrase√±a", type="password", key="password_input")
        submitted = st.form_submit_button("Entrar")

        if submitted:
            # Leer credenciales desde st.secrets si est√°n configuradas
            if "USERNAME" in st.secrets and "PASSWORD" in st.secrets:
                USERNAME = st.secrets["USERNAME"]
                PASSWORD = st.secrets["PASSWORD"]
            else:
                # Fallback a credenciales hardcodeadas (¬°CAMBIAR ESTO EN PRODUCCI√ìN!)
                USERNAME = "usuario_sochedi"
                PASSWORD = "password_seguro_y_largo" # <--- ¬°CAMBIA ESTO!

            if (st.session_state.username_input == USERNAME and 
                st.session_state.password_input == PASSWORD):
                st.session_state["password_correct"] = True
                st.success("¬°Acceso concedido! Recargando...")
                st.rerun() # <-- CORRECCI√ìN AQU√ç
            else:
                st.error("üòï Usuario o contrase√±a incorrectos")
        return False

# --- Cargar recursos (LLM y Vector Store) ---
@st.cache_resource
def cargar_recursos():
    # Cargar la GOOGLE_API_KEY desde los secretos de Streamlit Cloud
    if "GOOGLE_API_KEY" not in st.secrets:
        st.error("üö® La clave GOOGLE_API_KEY no est√° configurada en los secretos de Streamlit.")
        st.stop()
    os.environ["GOOGLE_API_KEY"] = st.secrets["GOOGLE_API_KEY"]

    # Inicializar el modelo de Embeddings
    embeddings = GoogleGenerativeAIEmbeddings(model="models/embedding-001")

    # Inicializar el modelo de lenguaje (LLM)
    llm = ChatGoogleGenerativeAI(model="gemini-1.0-pro", temperature=0.2, convert_system_message_to_human=True) # <-- MODELO ESTABLE

    # Inicializar ChromaDB (con cliente persistente expl√≠cito)
    from chromadb import PersistentClient
    try:
        # Intenta cargar el cliente de persistencia
        client = PersistentClient(path="chroma_db")
        # Aseg√∫rate de que el collection_name coincida con el que usaste en preparar_base_de_datos.py
        # Si no especificaste uno, el valor por defecto de LangChain suele ser "langchain"
        vector_store = Chroma(
            client=client,
            collection_name="langchain", # O el nombre que usaste si lo especificaste
            embedding_function=embeddings
        )
        st.sidebar.success("‚úÖ Base de conocimiento cargada.")
    except Exception as e:
        st.error(f"‚ùå Error al cargar ChromaDB: {e}. Aseg√∫rate que la carpeta 'chroma_db' est√° completa y no est√° corrupta.")
        st.stop() # Detener la ejecuci√≥n si falla la carga
        return None # Devuelve None si falla la carga

    # Plantilla de Prompt (adaptada para un asistente acad√©mico)
    template = """Eres un asistente virtual de la Escuela de Ingenier√≠a UOH.
    Tu objetivo es ayudar a los usuarios a obtener informaci√≥n sobre el desempe√±o acad√©mico de los estudiantes, sus datos y sus situaciones.
    Responde las preguntas del usuario bas√°ndote √∫nicamente en el siguiente contexto:
    {context}
    Si la pregunta no se puede responder con la informaci√≥n proporcionada en el contexto, simplemente di que no tienes suficiente informaci√≥n para responder.
    No intentes inventar una respuesta.
    Mant√©n tus respuestas claras, concisas y en espa√±ol.

    Pregunta del usuario: {question}
    Respuesta:"""
    QA_CHAIN_PROMPT = PromptTemplate.from_template(template)

    # Crear la cadena de RetrievalQA
    chain = RetrievalQA.from_chain_type(
        llm,
        retriever=vector_store.as_retriever(search_kwargs={"k": 3}), # Busca los 3 documentos m√°s relevantes
        chain_type_kwargs={"prompt": QA_CHAIN_PROMPT},
        return_source_documents=True
    )
    return chain

# --- L√≥gica principal de la aplicaci√≥n ---
def main():
    if not check_password():
        st.stop() # Detener la ejecuci√≥n si no est√° autenticado

    # Cargar y mostrar logos
    col1, col2, col3 = st.columns([1, 4, 1])
    with col1:
        st.image(Image.open(io.BytesIO(open("logo_uoh.png", "rb").read())), width=80)
    with col2:
        st.title("Asistente de Informaci√≥n de Estudiantes")
        st.markdown("##### Escuela de Ingenier√≠a UOH")
    with col3:
        st.image(Image.open(io.BytesIO(open("logo_eIng.png", "rb").read())), width=80)

    st.markdown("---")
    st.write("¬°Hola! Soy tu asistente virtual. Puedes preguntarme sobre el desempe√±o acad√©mico de los estudiantes de la UOH.")
    st.write("Por ejemplo: '¬øCu√°l es el PPA de un estudiante con RUT 12.345.678-9?' o '¬øQu√© asignaturas ha cursado el estudiante con RUT 12.345.678-9 y c√≥mo le fue?'")

    # Bot√≥n para limpiar cach√© y recargar la aplicaci√≥n (√∫til para depuraci√≥n)
    if st.button("üîÑ Limpiar cach√© y Recargar la App"):
        st.cache_data.clear()
        st.cache_resource.clear()
        st.rerun()

    # Cargar recursos (LLM y Vector Store)
    chain = cargar_recursos()

    if chain is None:
        st.error("No se pudo inicializar el asistente. Por favor, revisa los logs.")
        st.stop()

    # Inicializar historial de chat
    if "messages" not in st.session_state:
        st.session_state.messages = []

    # Mostrar mensajes del historial
    for message in st.session_state.messages:
        with st.chat_message(message["role"]):
            st.markdown(message["content"])

    # Entrada de usuario
    if prompt := st.chat_input("¬øEn qu√© puedo ayudarte?"):
        st.session_state.messages.append({"role": "user", "content": prompt})
        with st.chat_message("user"):
            st.markdown(prompt)

        with st.chat_message("assistant"):
            with st.spinner("Buscando y generando respuesta..."):
                response = chain.invoke(prompt)
                st.markdown(response["result"])
                st.session_state.messages.append({"role": "assistant", "content": response["result"]})

                # Opcional: Mostrar documentos fuente para depuraci√≥n
                # with st.expander("Ver documentos fuente"):
                #     for doc in response["source_documents"]:
                #         st.write(doc.page_content)
                #         st.write(f"Metadata: {doc.metadata}")

if __name__ == "__main__":
    # Asegurarse de que el directorio 'chroma_db' exista para que PersistentClient no falle al inicio.
    # En Streamlit Cloud, esto ya deber√≠a estar manejado porque la carpeta se sube.
    if not os.path.exists("chroma_db"):
        st.warning("La carpeta 'chroma_db' no se encontr√≥. Aseg√∫rate de que est√° en el mismo directorio que app.py.")
        # Aqu√≠ podr√≠as detener la app o redirigir a un mensaje de error si no es para despliegue.
        # st.stop() # Descomentar esto si la ausencia de la DB debe ser un error fatal.
        
    main()